# On feature branch build container and deploy to temporary ECS service
name: Publish Branch
on:
  pull_request:
    branches: [development]
    types: [opened, reopened, synchronize]

jobs:
  build_branch:
    name: Publish image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials from QA account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sfr_ingest_pipeline
          BRANCH_NAME: ${{ github.head_ref }}
          AIRTABLE_KEY: ${{ secrets.AIRTABLE_API_KEY}}
        run: |
          docker build --build-arg airtable-api-key=$AIRTABLE_KEY -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME"

      - name: Check if task and service already exists
        id: task-present-check
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          taskarn=$(aws ecs list-tasks --cluster sfr-pipeline-qa --service-name $BRANCH_NAME-qa | jq '.taskArns[0]' || true)
          existingtask=$(if [[ "$taskarn" != "" ]]; then echo true; else echo false; fi)
          echo "::set-output name=existingtask::$existingtask"

      - name: Force update of existing task with new container
        if: ${{ steps.task-present-check.outputs.existingtask == 'true' }}
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: aws ecs update-service --cluster sfr-pipeline-qa --service $BRANCH_NAME-qa --force-new-deployment
 
      - name: Populate task definition for API container
        if: ${{ steps.task-present-check.outputs.existingtask == 'false' }}
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: sfr-webapp
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy task definition to ECS
        if: ${{ steps.task-present-check.outputs.existingtask == 'false' }}
        run: aws ecs register-task-definition --cli-input-json file://${{ steps.render-app-container.outputs.task-definition }}

      - name: Create new service in ECS cluster
        if: ${{ steps.task-present-check.outputs.existingtask == 'false' }}
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: | 
          aws ecs create-service \
            --cluster sfr-pipeline-qa \
            --service-name $BRANCH_NAME-qa \
            --task-definition sfr-pipeline-testing \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-42f2e16f,subnet-6b1edc23],securityGroups=[sg-016cf234aebd31f7d],assignPublicIp=ENABLED}"

      - name: Wait for Service to become stable
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          aws ecs wait services-stable \
            --cluster sfr-pipeline-qa \
            --services $BRANCH_NAME-qa

      - name: Get ARN of branch QA task
        id: get-task-arn
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          taskarn=$(aws ecs list-tasks --cluster sfr-pipeline-qa --service $BRANCH_NAME-qa | jq '.taskArns[0]')
          echo "::set-output name=taskarn::$taskarn"

      - name: Get deployed ENI for service
        id: get-task-eni
        run: |
          tempeni=$(aws ecs describe-tasks --cluster sfr-pipeline-qa --tasks ${{ steps.get-task-arn.outputs.taskarn }} | jq '.tasks[0].attachments[0].details[1].value')
          taskeni=$(echo $tempeni | tr -d '"')
          echo "::set-output name=taskeni::$taskeni"

      - name: Get Public IP address for service
        id: get-public-ip
        run: |
          tempip=$(aws ec2 describe-network-interfaces --network-interface-ids ${{ steps.get-task-eni.outputs.taskeni }} | jq '.NetworkInterfaces[0].Association.PublicIp')
          taskip=$(echo $tempip | tr -d '"')
          echo "::set-output name=taskip::$taskip"

      - name: Add Task IP as comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.number }}
          body: |
            This branch is deployed at the following locations:

            [DRB Front End](http://${{ steps.get-public-ip.outputs.taskip }}:3000)
            [DRB API](http://${{ steps.get-public-ip.outputs.taskip }})
