# For all PRs, this workflow will
#     - Install deps
#     - Lint
#     - Typecheck
#     - Test
#     - Build docker image
name: CI

on:
  # will run on all PRs that are opened or updated (synchronized)
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  # changelog must be edited for every PR
  changelog:
    name: Updates Changelog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dangoslen/changelog-enforcer@v2
        with:
          changeLogPath: "CHANGELOG.md"
          skipLabels: "no-changelog"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version-file: ".nvmrc"
          cache: npm

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version-file: ".nvmrc"
          cache: npm

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Typecheck
        run: node_modules/typescript/bin/tsc --noEmit

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version-file: ".nvmrc"
          cache: npm

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Test
        run: npm run test

  docker_build:
    # Don't push anything to ECR, just build the docker image to make sure there are no build failures
    name: Build Docker Image
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Build image
        env:
          AIRTABLE_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        run: |
          docker build --build-arg airtable_api_key=$AIRTABLE_KEY .
